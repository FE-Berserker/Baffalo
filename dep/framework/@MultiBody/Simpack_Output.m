function Simpack_Output(obj,varargin)
% Output Assembly to Simapck file
% Author : Xie Yu
% p=inputParser;
% addParameter(p,'MultiSolve',0);
% parse(p,varargin{:});
% opt=p.Results;

if obj.Echo
    fprintf('Start output to Simpack ...\n');
end

% Check repeated name
if ~isempty(obj.SubStructure)
    Name=cellfun(@(x)x.Multi.Name,obj.SubStructure,'UniformOutput',false);
    Temp{1,1}=obj.Name;
    Name=[Temp;Name];
    if size(Name,1)~=size(unique(Name),1)
        error('Repeated name of substructure !')
    end
end

% Create empty simpack file
filename=strcat('.\',obj.Name,'.spck');
fid=fopen(filename,'w');
fprintf(fid, '%s\n','!file.version=3.5! Removing this line will make the file unreadable');
fprintf(fid, '%s\n','!');
fprintf(fid, '%s\n','! Copyright Dassault Systemes Simulia Corp. Generated by RoTA');
fprintf(fid, '%s\n','!');
fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n','! Simpack Version Information');
fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n','version.number = 20210000');
fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n','! Global parameters');
fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n',strcat('gravity (1) = ',num2str(obj.Gravity(1,1))));
fprintf(fid, '%s\n',strcat('gravity (2) = ',num2str(obj.Gravity(1,2))));
fprintf(fid, '%s\n',strcat('gravity (3) = ',num2str(obj.Gravity(1,3))));
fprintf(fid, '%s\n','vehicle.startvel = 0 ! Vehicle initial velocity');
fprintf(fid, '%s\n','vehicle.applystartvel = 0 ! Apply vehicle initial velocity at solver start');
fprintf(fid, '%s\n','glob.compat.flxnodeori = 0 ! Flexbody Node Orientation Method');
fprintf(fid, '%s\n','glob.compat.afcf = 0 ! References Frame for Joint and Force Element Forces and Torques');
fprintf(fid, '%s\n','rw.cont.meth = 2 ! MISCPAR_RW_CONTACT_METHOD');
fprintf(fid, '%s\n','rw.linear = 0 ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD');
fprintf(fid, '%s\n','time = 0 ! Time');
fprintf(fid, '%s\n','slv.active = $SLV_SolverSettings ! Active SolverSettings element');
fprintf(fid, '%s\n','track.active = null ! Active Track element');
fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n','! Views');
fprintf(fid, '%s\n','!**********************************************************************');

fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n','! Solver Settings');
fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n','slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK');
fprintf(fid, '%s\n','slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS');
fprintf(fid, '%s\n','slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance');
fprintf(fid, '%s\n','slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB');
fprintf(fid, '%s\n','slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL');
fprintf(fid, '%s\n','slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE');
fprintf(fid, '%s\n','slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER');
fprintf(fid, '%s\n','slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE');
fprintf(fid, '%s\n','slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM');
fprintf(fid, '%s\n','slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type');
fprintf(fid, '%s\n','slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC');
fprintf(fid, '%s\n','slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type');
fprintf(fid, '%s\n','slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)');
fprintf(fid, '%s\n','slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD');
fprintf(fid, '%s\n','slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC');
fprintf(fid, '%s\n','slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER');
fprintf(fid, '%s\n','slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS');
fprintf(fid, '%s\n','slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS');
fprintf(fid, '%s\n','slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS');
fprintf(fid, '%s\n','slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS');
fprintf(fid, '%s\n','slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD');
fprintf(fid, '%s\n','slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER');
fprintf(fid, '%s\n','slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE');
fprintf(fid, '%s\n','slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE');
fprintf(fid, '%s\n','slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS');
fprintf(fid, '%s\n','slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT');
fprintf(fid, '%s\n','slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES');
fprintf(fid, '%s\n','slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN');
fprintf(fid, '%s\n','slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP');
fprintf(fid, '%s\n','slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction');
fprintf(fid, '%s\n','slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC');
fprintf(fid, '%s\n','slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE');
fprintf(fid, '%s\n','slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS');
fprintf(fid, '%s\n','slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES');
fprintf(fid, '%s\n','slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS');
fprintf(fid, '%s\n','slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND');
fprintf(fid, '%s\n','slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC');
fprintf(fid, '%s\n','slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC');
fprintf(fid, '%s\n','slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR');
fprintf(fid, '%s\n','slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ');
fprintf(fid, '%s\n','slv.integ.tend.time (               $SLV_SolverSettings           ) = { 2 s }                 ! TIME_INTEG_TIMEPAR_END_TIME');
fprintf(fid, '%s\n','slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT');
fprintf(fid, '%s\n','slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL');
fprintf(fid, '%s\n','slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT');
fprintf(fid, '%s\n','slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL');
fprintf(fid, '%s\n','slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file');
fprintf(fid, '%s\n','slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file');
fprintf(fid, '%s\n','slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file');
fprintf(fid, '%s\n','slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file');
fprintf(fid, '%s\n','slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file');
fprintf(fid, '%s\n','slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file');
fprintf(fid, '%s\n','slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file');
fprintf(fid, '%s\n','slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file');
fprintf(fid, '%s\n','slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file');
fprintf(fid, '%s\n','slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file');
fprintf(fid, '%s\n','slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file');
fprintf(fid, '%s\n','slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file');
fprintf(fid, '%s\n','slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file');
fprintf(fid, '%s\n','slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file');
fprintf(fid, '%s\n','slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file');
fprintf(fid, '%s\n','slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file');
fprintf(fid, '%s\n','slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file');
fprintf(fid, '%s\n','slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file');
fprintf(fid, '%s\n','slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file');
fprintf(fid, '%s\n','slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result filee');
fprintf(fid, '%s\n','slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file');
fprintf(fid, '%s\n','slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file');
fprintf(fid, '%s\n','slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR');
fprintf(fid, '%s\n','slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE');
fprintf(fid, '%s\n','slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE');
fprintf(fid, '%s\n','slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)');
fprintf(fid, '%s\n','slv.txt (                           $SLV_SolverSettings           ) = ''''                      ! Comment');

fprintf(fid, '%s\n','!**********************************************************************');
fprintf(fid, '%s\n','! Reference systems');
fprintf(fid, '%s\n','!**********************************************************************');

fprintf(fid, '%s\n','refsys.type (                       $R_Isys                       ) = 1                       ! Type');
fprintf(fid, '%s\n','refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01');
fprintf(fid, '%s\n','refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01');
fprintf(fid, '%s\n','refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02');
fprintf(fid, '%s\n','refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02');
fprintf(fid, '%s\n','marker.type (                       $M_Isys                       ) = 1                       ! Type');
fprintf(fid, '%s\n','marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system');
fprintf(fid, '%s\n','prim.type (                         $P_Isys                       ) = 30                      ! Type');
fprintf(fid, '%s\n','prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker');
fprintf(fid, '%s\n','prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)');
fprintf(fid, '%s\n','prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)');
fprintf(fid, '%s\n','prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)');
fprintf(fid, '%s\n','prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)');
fprintf(fid, '%s\n','prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length');
fclose(fid);
% Print Body
filename=strcat('.\',obj.Name,'.sjs');
fid=fopen(filename,'w');
Bodyprint(obj,fid);
% Print Ref
if size(obj.Ref,1)>1
    Refprint(obj,fid)
end
% Print SubStructure
if ~isempty(obj.SubStructure)
    SubStructureprint(obj,strcat('.\',obj.Name,'.sjs'),fid)
end

% Print Function
if ~isempty(obj.Function)
    Functionprint(obj,fid)
end
% Print Joint
if ~isempty(obj.Joint)
    Jointprint(obj,fid)
end
% Print Constraint
if ~isempty(obj.Constraint)
    Constraintprint(obj,fid)
end
% Print Force
if ~isempty(obj.Force)
    Forceprint(obj,fid)
end

% Print Sender
if ~isempty(obj.Sender)
    Senderprint(obj,fid)
end

% Print Receiver
if ~isempty(obj.Receiver)
    Receiverprint(obj,fid)
end

fprintf(fid, '%s\n','}');
fprintf(fid, '%s\n','catch(err)');
fprintf(fid, '%s\n','{');
fprintf(fid, '%s\n','print("\nError: During creating or editing Modeling Elements something went wrong, script will be aborted!\n" + err)');
fprintf(fid, '%s\n','myModel.close();');
fprintf(fid, '%s\n','return 1;');
fprintf(fid, '%s\n','}');

fprintf(fid, '%s\n','var myNewName = myScriptFile.path + "/" + myScriptFile.baseName + "-mod.spck";');
fprintf(fid, '%s\n','myModel.saveAs(myNewName);');
fprintf(fid, '%s\n','myModel.close();');
fprintf(fid, '%s\n','}');

fclose(fid);

Command=strcat(obj.Name,'.sjs');
system(Command);

%% Print
if obj.Echo
    fprintf('Successfully output to Simpack . \n');
end
end
